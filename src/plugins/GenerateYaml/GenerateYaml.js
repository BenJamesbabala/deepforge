/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 0.14.0 from webgme on Thu Apr 07 2016 06:13:30 GMT-0500 (CDT).
 */

define([
    'deepforge/GraphChecker',
    'plugin/PluginBase'
], function (
    GraphChecker,
    PluginBase
) {
    'use strict';

    /**
     * Initializes a new instance of GenerateYaml.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin GenerateYaml.
     * @constructor
     */
    var GenerateYaml = function () {
        // Call base class' constructor.
        PluginBase.call(this);
    };

    // Prototypal inheritance from PluginBase.
    GenerateYaml.prototype = Object.create(PluginBase.prototype);
    GenerateYaml.prototype.constructor = GenerateYaml;

    /**
     * Gets the name of the GenerateYaml.
     * @returns {string} The name of the plugin.
     * @public
     */
    GenerateYaml.prototype.getName = function () {
        return 'GenerateYaml';
    };

    /**
     * Gets the semantic version (semver.org) of the GenerateYaml.
     * @returns {string} The version of the plugin.
     * @public
     */
    GenerateYaml.prototype.getVersion = function () {
        return '0.1.0';
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    GenerateYaml.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.

        var converter = new GraphChecker(this.core),
            name = this.core.getAttribute(this.activeNode, 'name') + '.yml';

        this.core.loadChildren(this.activeNode)
        .then(children => {
            var yaml = converter.gme(children).to.yaml();

            // Save the yaml output
            this.blobClient.putFile(name, yaml)
            .then(hash => {
                this.result.addArtifact(hash);
                this.result.setSuccess(true);
                callback(null, this.result);
            })
            .catch(err => callback(err));
        });
    };

    return GenerateYaml;
});
